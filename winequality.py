# -*- coding: utf-8 -*-
"""WineQuality.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1esLamY1OvIlhuzw7g-yFji93hYz9zBC3

# Bibliotecas e dados utilizados
"""

import pandas as pd
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns

url = 'https://archive.ics.uci.edu/ml/machine-learning-databases/wine-quality/winequality-red.csv'
df = pd.read_csv(url, sep=';')
#O conjunto de dados contém informações sobre vinhos tintos, incluindo características químicas e uma pontuação de qualidade (de 0 a 10)

"""# Exploração Inicial"""

df.head()

df.info()

df.describe()

df.isnull().sum()

"""# Análise Explorátoria
<p>Partirei direto para a análise pois não há elementos vazios na tabela e nem foi necessário excluir nenhuma coluna</p>
"""

#Histograma para cada coluna
for coluna in df.columns:
    plt.figure(figsize=(8, 4))
    plt.hist(df[coluna].dropna(), bins=30, color='blue', edgecolor='black')
    plt.title(f'Histograma de {coluna}')
    plt.xlabel(coluna)
    plt.ylabel('Frequência')
    plt.show()

#box plots por variavel para identificar outliers

for coluna in df.columns:
  plt.figure(figsize=(6, 4))
  sns.boxplot(y=df[coluna])
  plt.title(coluna)
  plt.show()

#ainda não vi necessidade de excluir outliers mas ainda vou relacionar as correlações

# Calcular a matriz de correlação
correlation_matrix = df.corr()

# Criar o heatmap
plt.figure(figsize=(10, 8))  # Ajustar o tamanho do gráfico
sns.heatmap(correlation_matrix, annot=True, cmap='coolwarm', fmt=".2f", linewidths=0.5)

# Exibir o gráfico
plt.show()

plt.figure(figsize=(8, 6))
sns.countplot(x='quality', data=df)
plt.title('Distribuição dos Vinhos por Nível de Qualidade')
plt.xlabel('Qualidade')
plt.ylabel('Contagem')
plt.show()
qualidade_contagem = df['quality'].value_counts().sort_index()
print(qualidade_contagem)

#agrupamento de dados

medias_por_qualidade = df.groupby('quality').mean()
print(medias_por_qualidade)

# Relação positiva: Álcool vs Qualidade
plt.figure(figsize=(10, 4))
sns.scatterplot(x=df['quality'], y=df['alcohol'], color='blue')
plt.title('Relação entre Qualidade e Álcool (Positiva)')
plt.xlabel('Qualidade')
plt.ylabel('Álcool')
plt.show()

# Relação positiva: Sulfatos vs Qualidade
plt.figure(figsize=(10, 4))
sns.scatterplot(x=df['quality'], y=df['sulphates'], color='blue')
plt.title('Relação entre Qualidade e Sulfatos (Positiva)')
plt.xlabel('Qualidade')
plt.ylabel('Sulfatos')
plt.show()

# Relação positiva: Ácido Cítrico vs Qualidade
plt.figure(figsize=(10, 4))
sns.scatterplot(x=df['quality'], y=df['citric acid'], color='blue')
plt.title('Relação entre Qualidade e Ácido Cítrico (Positiva)')
plt.xlabel('Qualidade')
plt.ylabel('Ácido Cítrico')
plt.show()

# Relação negativa: Acidez Volátil vs Qualidade
plt.figure(figsize=(10, 4))
sns.scatterplot(x=df['quality'], y=df['volatile acidity'], color='red')
plt.title('Relação entre Qualidade e Acidez Volátil (Negativa)')
plt.xlabel('Qualidade')
plt.ylabel('Acidez Volátil')
plt.show()

# Relação negativa: Dióxido de Enxofre Total vs Qualidade
plt.figure(figsize=(10, 4))
sns.scatterplot(x=df['quality'], y=df['total sulfur dioxide'], color='red')
plt.title('Relação entre Qualidade e Dióxido de Enxofre Total (Negativa)')
plt.xlabel('Qualidade')
plt.ylabel('Dióxido de Enxofre Total')
plt.show()

# Relação negativa: Densidade vs Qualidade
plt.figure(figsize=(10, 4))
sns.scatterplot(x=df['quality'], y=df['density'], color='red')
plt.title('Relação entre Qualidade e Densidade (Negativa)')
plt.xlabel('Qualidade')
plt.ylabel('Densidade')
plt.show()

variaveis_quimicas = ['alcohol', 'citric acid', 'sulphates', 'density', 'volatile acidity', 'total sulfur dioxide']

# Criar um gráfico separado para cada variável
for coluna in variaveis_quimicas:
    plt.figure(figsize=(8, 4))  # Tamanho do gráfico
    sns.lineplot(
        x=medias_por_qualidade.index,
        y=medias_por_qualidade[coluna],
        marker='o',  # Marcadores nos pontos
        color='blue'  # Cor da linha
    )
    plt.title(f'Média de {coluna} por Qualidade')
    plt.xlabel('Qualidade')
    plt.ylabel('Média')
    plt.grid(True)  # Adiciona uma grade para melhorar a visualização
    plt.show()

vinhos_perfeitos = df[df['quality'] == 8]
vinhos_pessimos = df[df['quality'] == 3]

medias_perfeitos = vinhos_perfeitos.mean()
print("Médias para vinhos de qualidade perfeita = 8:")
print(medias_perfeitos)

medias_pessimos = vinhos_pessimos.mean()
print("Médias para vinhos de qualidade pessima = 3:")
print(medias_pessimos)



# Calcular as médias gerais
medias_gerais = df.mean()
print("\nMédias gerais:")
print(medias_gerais)

# Filtrar vinhos bons (qualidade entre 6 e 7)
vinhos_bons = df[(df['quality'] >= 6) & (df['quality'] <= 7)]

# Filtrar vinhos ruins (qualidade entre 4 e 5)
vinhos_ruins = df[(df['quality'] >= 4) & (df['quality'] <= 5)]

# Calcular as médias das variáveis para vinhos bons
medias_bons = vinhos_bons.mean()
print("Médias para vinhos bons (qualidade entre 6 e 7):")
print(medias_bons)

# Calcular as médias das variáveis para vinhos ruins
medias_ruins = vinhos_ruins.mean()
print("\nMédias para vinhos ruins (qualidade entre 4 e 5):")
print(medias_ruins)

# Selecionar as variáveis de interesse (excluindo 'quality')
variaveis = ['fixed acidity', 'volatile acidity', 'citric acid', 'residual sugar', 'chlorides',
             'free sulfur dioxide', 'total sulfur dioxide', 'density', 'pH', 'sulphates', 'alcohol']

# Preparar os dados para o gráfico de barras
categorias = variaveis
x = np.arange(len(categorias))  # Posições no eixo x
largura = 0.2  # Largura das barras

# Criar o gráfico de barras
plt.figure(figsize=(14, 8))

# Barras para cada grupo
plt.bar(x - 1.5*largura, medias_perfeitos[variaveis], width=largura, label='Perfeitos (8)', color='gold')
plt.bar(x - 0.5*largura, medias_bons[variaveis], width=largura, label='Bons (6-7)', color='green')
plt.bar(x + 0.5*largura, medias_ruins[variaveis], width=largura, label='Ruins (4-5)', color='orange')
plt.bar(x + 1.5*largura, medias_pessimos[variaveis], width=largura, label='Péssimos (3)', color='red')

# Ajustar o gráfico
plt.xlabel('Variáveis')
plt.ylabel('Média')
plt.title('Comparação das Médias das Variáveis por Grupo de Qualidade')
plt.xticks(x, categorias, rotation=45, ha='right')  # Rotacionar rótulos do eixo x
plt.legend()
plt.grid(axis='y', linestyle='--', alpha=0.7)
plt.tight_layout()  # Ajustar layout para evitar cortes
plt.show()